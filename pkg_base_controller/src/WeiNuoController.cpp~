#include "WeiNuoController.h"
#include <iostream>

using std::cout;
using std::endl;

WeiNuoController::WeiNuoController(const char* motorPort,double pWheelRadius,double pWheelDis,double pGearRatio):BaseController(pWheelRadius,pWheelDis,pGearRatio){
	motorDir = FF;
	openMotor(motorPort);
	pub = nHandle.advertise<nav_msgs::Odometry>("topic_odometer_sensor",10);
	getHallCount(leftHallCount,rightHallCount);
	cmdVelTime = ros::Time();
}

WeiNuoController::WeiNuoController(const WeiNuoController& wn):BaseController(getWheelRadius(),getWheelDis(),getGearRatio()){
	*motor = *(wn.motor);
	motorDir = wn.motorDir;
}

WeiNuoController& WeiNuoController::operator=(const WeiNuoController& wn){
	*motor = *(wn.motor);
	motorDir = wn.motorDir;
	return *this;
}

void WeiNuoController::onRecCmdVel(const geometry_msgs::Twist::ConstPtr& msg){
	double l,r;
	twist2RotateSpd(msg,&l,&r);
	move(l,r);
	pubFakeOdometerMsg();	//it's a fake msg using open-loop and integration
}

void WeiNuoController::start(){
	subCmdVel();
	ros::Rate loop(100);
	while(ros::ok()){
		ros::spinOnce();
	//	pubOdometerMsg();
		loop.sleep();
	}

}

void WeiNuoController::openMotor(const char* motorPort,int baud,int dataBits,int stopBits,char parity){
	motor = new SerialPort(motorPort);
	motor->openPort();
	motor->setPort(baud,dataBits,stopBits,parity);
	motor->setBlock(false);
	motor->setInMode('r');
}

void WeiNuoController::closeMotor(){
	if(motor!=NULL && motor->isOpen()){
		motor->closePort();
	}
}

void WeiNuoController::crc16Modbus(uchar *p, int len,uchar* hCrc,uchar* lCrc)
{
	char i;
	int j;
	unsigned int crc=0xffff;
	
	for(j=0;j<len;j++)
	{
		crc^=(*p);
		p++;
		for(i=8;i!=0;i--)
		{
			if(crc&1)
			{
				crc>>=1;
				crc^=0xa001;
			}
			else
			{
				crc>>=1;
			}
		}
	}
	*hCrc = (crc&0xff00)>>8;
	*lCrc = (crc&0x00ff); 
}

void WeiNuoController::move(int leftRotateSpd,int rightRotateSpd){
	//update motor direction
	MotorDir newDir= FF;
	if(leftRotateSpd>=0){
		if(rightRotateSpd>=0){
			newDir = FF;
		}
		else{
			newDir = FB;
		}
	}
	else{
		if(rightRotateSpd>=0){
			newDir = BF;
		}
		else{
			newDir = BB;
		}
	}
	//if direction is changed, 1s delay is needed in case of stop
	if(newDir != motorDir){
		usleep(1000*1000);
	}
	motorDir = newDir;	//update direction

	//send the cmd to motor driver
	leftRotateSpd = abs(leftRotateSpd);
	rightRotateSpd = abs(rightRotateSpd);
	vector<uchar> moveCmd(9);
	moveCmd[0] = 0x1b;
	moveCmd[1] = motorDir^0x10;
	moveCmd[2] = (uchar)(leftRotateSpd>>8);
	moveCmd[3] = (uchar)(leftRotateSpd & 0x00ff);
	moveCmd[4] = (uchar)(rightRotateSpd>>8);
	moveCmd[5] = (uchar)(rightRotateSpd & 0x00ff);
	crc16Modbus(&moveCmd[1],5,&moveCmd[6],&moveCmd[7]);
	moveCmd[8] = 0x05;
	motor->writePort(moveCmd);	//send cmd
}

bool WeiNuoController::getHallCount(int& leftHallCount,int& rightHallCount){
	//send query command
	vector<uchar> queryCmd(7);
	queryCmd[0] = 0x1b;
	queryCmd[1] = 0x20;
	queryCmd[2] = 0x01;
	queryCmd[3] = 0x00;
	crc16Modbus(&queryCmd[1],3,&queryCmd[4],&queryCmd[5]);
	queryCmd[6] = 0x05;
	motor->writePort(queryCmd);
	//read data from hall sensor
	char ch=0xff;
	vector<uchar> hallBuffer(13);
	for(int i =0;i<13;i++){
		hallBuffer[i] = 0xff;
	}
	int errCount = 0;
	while(ch!=0x1b){
		motor->readPort(&ch,1);
		errCount++;
		if(errCount >=14){
			motor->inFlush();
			return false ;
		}
	}
	motor->readPort(hallBuffer,13);
	hallBuffer.insert(hallBuffer.begin(),ch);
	//analyse the speed
	leftHallCount = hallBuffer[3]<<24 + hallBuffer[4]<<16 + hallBuffer[5]<<8 + hallBuffer[6];
	rightHallCount = hallBuffer[7]<<24 + hallBuffer[8]<<16 + hallBuffer[9]<<8 + hallBuffer[10];

	//check validness
	if(hallBuffer[0] == 0x1b && hallBuffer[1] == 0x20 && hallBuffer[2] == 0x08 && hallBuffer[13] == 0x05){
		return true;
	}
	else{
		return false;
	}
}	


bool WeiNuoController::getRotateSpd(double& leftRotateSpd,double& rightRotateSpd){
	//send query command
	vector<uchar> queryCmd(7);
	queryCmd[0] = 0x1b;
	queryCmd[1] = 0x21;
	queryCmd[2] = 0x01;
	queryCmd[3] = 0x00;
	crc16Modbus(&queryCmd[1],3,&queryCmd[4],&queryCmd[5]);
	queryCmd[6] = 0x05;
	motor->writePort(queryCmd);
	//read data from hall sensor
	char ch=0xff;
	vector<uchar> hallBuffer(13);
	for(int i =0;i<13;i++){
		hallBuffer[i] = 0xff;
	}
	int errCount = 0;
	while(ch!=0x1b){
		motor->readPort(&ch,1);
		errCount++;
		if(errCount >=14){
			motor->inFlush();
			return false ;
		}
	}
	motor->readPort(hallBuffer,13);
	hallBuffer.insert(hallBuffer.begin(),ch);
	//analyse the speed
	leftRotateSpd = hallBuffer[5]<<8 + hallBuffer[6];
	rightRotateSpd = hallBuffer[9]<<8 + hallBuffer[10];

	//check validness
	if(hallBuffer[0] == 0x1b && hallBuffer[1] == 0x21 && hallBuffer[2] == 0x08 && hallBuffer[13] == 0x05){
		return true;
	}
	else{
		return false;
	}
}	

bool WeiNuoController::getTwist(double& linSpd,double& angSpd){
	double leftRotateSpd,rightRotateSpd;
	if(getRotateSpd(leftRotateSpd,rightRotateSpd)){
		rotateSpd2Twist(linSpd,angSpd,leftRotateSpd,rightRotateSpd);
		return true;
	}	
	else{
		return false;
	}
}

bool WeiNuoController::getTwist(geometry_msgs::Twist& msg){
	double leftRotateSpd,rightRotateSpd;
	if(getRotateSpd(leftRotateSpd,rightRotateSpd)){
		rotateSpd2Twist(msg,leftRotateSpd,rightRotateSpd);
		return true;
	}	
	else{
		return false;
	}
}

void WeiNuoController::pubOdometerMsg(){
	//update hall count and get postion change
	int newLeftHallCount,newRightHallCount;
	bool postionReq = getHallCount(newLeftHallCount,newRightHallCount);
	double linDis,angDis;
	if(postionReq){
		const double pulsePerRound = 2 * 3;
		double leftRotateRound,rightRotateRound;
		//over flow handle and get rotate round
		const int upFlowLimit = 0x8fffffff; 
		const int downFlowLimit = 0xf0000000;
		//left
		if(newLeftHallCount > upFlowLimit/2 && leftHallCount < downFlowLimit/2){
			leftRotateRound = ((downFlowLimit-leftHallCount) + (newLeftHallCount - upFlowLimit)) / pulsePerRound;
		}
		else if(newLeftHallCount < downFlowLimit/2 && leftHallCount > upFlowLimit/2){
			leftRotateRound = ((newLeftHallCount-downFlowLimit) + (upFlowLimit-leftHallCount)) / pulsePerRound;
		}
		else{
			leftRotateRound = (newLeftHallCount - leftHallCount)/ pulsePerRound;
		}
		//right
		if(newRightHallCount > upFlowLimit/2 && rightHallCount < downFlowLimit/2){
			rightRotateRound = ((downFlowLimit-rightHallCount) + (newRightHallCount - upFlowLimit)) / pulsePerRound;
		}
		else if(newRightHallCount < downFlowLimit/2 && rightHallCount > upFlowLimit/2){
			rightRotateRound = ((newRightHallCount-downFlowLimit) + (upFlowLimit-rightHallCount)) / pulsePerRound;
		}
		else{
			rightRotateRound = (newRightHallCount - rightHallCount)/ pulsePerRound;
		}
		//get position change distance
		rotateSpd2Twist(linDis,angDis,leftRotateRound,rightRotateRound);
		//update hall count
		leftHallCount = newLeftHallCount;
		rightHallCount = newRightHallCount;
	}

	//get twist
	double linSpd,angSpd;
	bool twistReq = getTwist(linSpd,angSpd);
		
	//publish infomation if ok
	if(postionReq && twistReq){
		nav_msgs::Odometry odometerMsg;
		odometerMsg.header.stamp = ros::Time();
		odometerMsg.header.frame_id = "base_link";
		odometerMsg.pose.pose.position.x = linDis;
		odometerMsg.pose.pose.position.y = 0;
		odometerMsg.pose.pose.position.z = 0;
		odometerMsg.pose.pose.orientation = tf::createQuaternionMsgFromYaw(angDis);
		odometerMsg.twist.twist.linear.x = linSpd;
		odometerMsg.twist.twist.linear.y = 0;
		odometerMsg.twist.twist.linear.z = 0;
		odometerMsg.twist.twist.angular.x = 0;
		odometerMsg.twist.twist.angular.y = 0;
		odometerMsg.twist.twist.angular.z = angSpd;
		//pub
		pub.publish(odometerMsg);
	}
}

void WeiNuoController::pubFakeOdometerMsg(const geometry_msgs::Twist::ConstPtr& msg){
	//integrate the spd to dis
	ros::Time newCmdVelTime = ros::Time();
	double deltaTime = (newCmdVelTime - cmdVelTime).toSec();
	cmdVelTime = newCmdVelTime; 	//update the cmd vel time
	double linDis = msg->linear.x * deltaTime;
	double angDis = msg->angular.z * deltaTime;

	//get twist
	//trust the expected twist
		
	//publish infomation 
	nav_msgs::Odometry odometerMsg;
	odometerMsg.header.stamp = cmdVelTime;
	odometerMsg.header.frame_id = "base_link";
	odometerMsg.pose.pose.position.x = linDis;
	odometerMsg.pose.pose.position.y = 0;
	odometerMsg.pose.pose.position.z = 0;
	odometerMsg.pose.pose.orientation = tf::createQuaternionMsgFromYaw(angDis);
	odometerMsg.twist.twist = *msg;
	//pub
	pub.publish(odometerMsg);
}

